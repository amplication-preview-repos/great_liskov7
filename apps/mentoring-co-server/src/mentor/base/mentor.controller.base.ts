/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MentorService } from "../mentor.service";
import { MentorCreateInput } from "./MentorCreateInput";
import { Mentor } from "./Mentor";
import { MentorFindManyArgs } from "./MentorFindManyArgs";
import { MentorWhereUniqueInput } from "./MentorWhereUniqueInput";
import { MentorUpdateInput } from "./MentorUpdateInput";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { SessionWhereUniqueInput } from "../../session/base/SessionWhereUniqueInput";

export class MentorControllerBase {
  constructor(protected readonly service: MentorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mentor })
  async createMentor(@common.Body() data: MentorCreateInput): Promise<Mentor> {
    return await this.service.createMentor({
      data: data,
      select: {
        age: true,
        createdAt: true,
        experience: true,
        id: true,
        name: true,
        skills: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mentor] })
  @ApiNestedQuery(MentorFindManyArgs)
  async mentors(@common.Req() request: Request): Promise<Mentor[]> {
    const args = plainToClass(MentorFindManyArgs, request.query);
    return this.service.mentors({
      ...args,
      select: {
        age: true,
        createdAt: true,
        experience: true,
        id: true,
        name: true,
        skills: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mentor(
    @common.Param() params: MentorWhereUniqueInput
  ): Promise<Mentor | null> {
    const result = await this.service.mentor({
      where: params,
      select: {
        age: true,
        createdAt: true,
        experience: true,
        id: true,
        name: true,
        skills: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMentor(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() data: MentorUpdateInput
  ): Promise<Mentor | null> {
    try {
      return await this.service.updateMentor({
        where: params,
        data: data,
        select: {
          age: true,
          createdAt: true,
          experience: true,
          id: true,
          name: true,
          skills: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMentor(
    @common.Param() params: MentorWhereUniqueInput
  ): Promise<Mentor | null> {
    try {
      return await this.service.deleteMentor({
        where: params,
        select: {
          age: true,
          createdAt: true,
          experience: true,
          id: true,
          name: true,
          skills: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/sessions")
  @ApiNestedQuery(SessionFindManyArgs)
  async findSessions(
    @common.Req() request: Request,
    @common.Param() params: MentorWhereUniqueInput
  ): Promise<Session[]> {
    const query = plainToClass(SessionFindManyArgs, request.query);
    const results = await this.service.findSessions(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        duration: true,
        id: true,

        mentee: {
          select: {
            id: true,
          },
        },

        mentor: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sessions")
  async connectSessions(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        connect: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sessions")
  async updateSessions(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        set: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sessions")
  async disconnectSessions(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        disconnect: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
